AWSTemplateFormatVersion: 2010-09-09

Description: Template to create a Fargate instance

# Based on the 'Fully Public Container' deployment from:
# https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/services/ECS#fully-public-container
#
# Merges the 'public-vpc.yml' and 'public-service.yml'.

Parameters:

  ServiceName:
    Type: String
    Default: SpringMvcApp
    Description: A name for the service
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        !Ref 'AWS::StackName'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: '121431078109.dkr.ecr.eu-west-2.amazonaws.com/aws-training-ecs:latest'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'

  Service:
    Type: AWS::ECS::Service
#    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'InstanceSecurityGroup'
          Subnets:
            - !Ref 'PublicSubnetOne'
      TaskDefinition: !Ref 'TaskDefinition'
#      LoadBalancers:
#        - ContainerName: !Ref 'ServiceName'
#          ContainerPort: !Ref 'ContainerPort'
#          TargetGroupArn: !Ref 'TargetGroup'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: '10.0.0.0/16'

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  #
  # This covers outbound traffic used by Fargate to pull images from ECR
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable


#  PublicLoadBalancerSG:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Access to the public facing load balancer
#      VpcId: !Ref 'VPC'
#      SecurityGroupIngress:
#        # Allow access to ALB from anywhere on the internet
#        - CidrIp: 0.0.0.0/0
#          IpProtocol: -1
#  PublicLoadBalancer:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Scheme: internet-facing
#      LoadBalancerAttributes:
#        - Key: idle_timeout.timeout_seconds
#          Value: '30'
#      Subnets:
#        # The load balancer is placed into the public subnets, so that traffic
#        # from the internet can reach the load balancer directly via the internet gateway
#        - !Ref PublicSubnetOne
#      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
#  # A dummy target group is used to setup the ALB to just drop traffic
#  # initially, before any real service target groups have been added.
#  DummyTargetGroupPublic:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      HealthCheckIntervalSeconds: 6
#      HealthCheckPath: /
#      HealthCheckProtocol: HTTP
#      HealthCheckTimeoutSeconds: 5
#      HealthyThresholdCount: 2
#      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
#      Port: 80
#      Protocol: HTTP
#      UnhealthyThresholdCount: 2
#      VpcId: !Ref 'VPC'
#  PublicLoadBalancerListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    DependsOn:
#      - PublicLoadBalancer
#    Properties:
#      DefaultActions:
#        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
#          Type: 'forward'
#      LoadBalancerArn: !Ref 'PublicLoadBalancer'
#      Port: 80
#      Protocol: HTTP



  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  # This includes ability to pull images from ECR
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable TCP access on port 8080
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: My CF Fargate Security Group

Outputs:
  SecurityGroupId:
    Description: Security Group Id
    Value: !Ref InstanceSecurityGroup